using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["eltopo"], :eltopo),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/akels/ElTopoBuilder/releases/download/v0.1.3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/ElTopoBuilder.v0.1.3.x86_64-linux-gnu.tar.gz", "d90214527376cacb1db0b32484a7310710cb80c8d208e3927e5733512904e792"),
    Windows(:x86_64) => ("$bin_prefix/ElTopoBuilder.v0.1.3.x86_64-w64-mingw32.tar.gz", "23353b2a327526759ade70b9a873d7577ce8df86ca51e3ef1d82605c8fcfe9d2"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
